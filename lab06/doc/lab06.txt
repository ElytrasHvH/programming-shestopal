Лабораторна робота N6 Масиви

Шестопал Дмитро Олексійович

Перемножити квадратну матрицю на саму себе (возвести у квадрат)
Основна частина:
-Опис роботи функції: перемноження матриць за правилом множення матриць
-Вхідні данні: 
x (int) - визначення розмірності матриці. може бути тільки цілим позитивним числом.
a[x][x] (int) - Матриця як заповнюэться за допомогою кода знизу, т.к. немає ділення - может бути лише int
Для заповнення матриці використовується така формула/функція:
for (int i = 0; i < x; i++) {
		for (int j = 0; j < x; j++) {
			a[i][j] = (i + 1) * j + i; //filling matrix with random stuff
		}
	}
	Перший символ завжди виходить 0, тому якщо розмірність матриці буде 1, программа поверне 0 на виході
Якщо представити матрицю у стандартному матричному вигляді - заповнюватися буде спочатку перша строка, потім друга і т.д.
	номер позиції у строці є номером стовпка.
	Дослідження результатів роботи:
b[x][x] - Вихідна матриця (дорівнює a*a)
	
	Код:
	#include <stdio.h>
int main()
{
	int x = -1;
	int ii;
	for (ii = 0; x < 1; ii++) { //kinda infinite loop forcing to make matrix's dimenson positive integer
		printf("Matrix dimension is: ");
		scanf("%d", &x);
		if (x < 1) {
			printf("Dimension must be at least 1\n");
		}
	}
	}
	int k, a[x][x], b[x][x];
	printf("\n");
	for (int i = 0; i < x; i++) {
		for (int j = 0; j < x; j++) {
			a[i][j] = (i + 1) * j + i; //filling matrix with random stuff
		}
	}
	for (i = 0; i < x; i++) {
		for (j = 0; j < x; j++) {
			printf("%d ", a[i][j]); //printing matrix that was computed (before squaring)
		}
		if (j == x) {
			printf("\n"); //dropping to next line to see matrix normally
		}
	}
	for (i = 0; i < x; i++) { //for every row
		for (j = 0; j < x; j++) { //and every column
			b[i][j] = 0;
			for (k = 0; k < x; k++) { //k being a counter to get numbers with a look of number(column's number) and (row's number)number
				b[i][j] += a[i][k] * a[k][j]; //adding up because this how matrix multiplication works
			}
		}
	}
	for (i = 0; i < x; i++) {
		for (j = 0; j < x; j++) {
			printf("%d ", b[i][j]); //printing matrix that was computed (after squaring)
		}
		if (j == x) {
			printf("\n"); //dropping to next line to see matrix normally
		}
	}

	return x;
	

З коду заповнення зверху - вхідна матриця 2х2 буде:
0 1
1 3

вихідна буде очікуванна:
1 3
3 10
Вхідна 3 х 3 буде очікуванна
0 1 2 
1 3 5 
2 5 8
Піднесення до квадрату цієї матриці видасть.
5 13 21 
13 35 57 
21 57 93
Перевіряємо.
Перевіряємо з матрицею другого порядку
ставимо breakpoint на return; 
первіряємо:
(з якоїсь причини усе зберігається у форматі a[0][n] (b[0][n] для массиву відповідей) 
(де n це значення від 0 до x^2-1,якщо n> n1*x де n1 > 1 то це перехід на наступний рядок з номером n1)
(int) a[0][0] = 0
(lldb) var a[0][1]
(int) a[0][1] = 1
(lldb) var a[0][2]
(int) a[0][2] = 1
(lldb) var a[0][3]
(int) a[0][3] = 3

(int) b[0][0] = 1
(lldb) var b[0][1]
(int) b[0][1] = 3
(lldb) var b[0][2]
(int) b[0][2] = 3
(lldb) var b[0][3]
(int) b[0][3] = 10

Перевіряємо з матрицею третього порядку 
(lldb) var a[0][0]
(int) a[0][0] = 0
(lldb) var a[0][1]
(int) a[0][1] = 1
(lldb) var a[0][2]
(int) a[0][2] = 2
(lldb) var a[0][3]
(int) a[0][3] = 1
(lldb) var a[0][4]
(int) a[0][4] = 3
(lldb) var a[0][5]
(int) a[0][5] = 5
(lldb) var a[0][6]
(int) a[0][6] = 2
(lldb) var a[0][7]
(int) a[0][7] = 5
(lldb) var a[0][8]
(int) a[0][8] = 8

(lldb) var b[0][0]
(int) b[0][0] = 5
(lldb) var b[0][1]
(int) b[0][1] = 13
(lldb) var b[0][2]
(int) b[0][2] = 21
(lldb) var b[0][3]
(int) b[0][3] = 13
(lldb) var b[0][4]
(int) b[0][4] = 35
(lldb) var b[0][5]
(int) b[0][5] = 57
(lldb) var b[0][6]
(int) b[0][6] = 21
(lldb) var b[0][7]
(int) b[0][7] = 57
(lldb) var b[0][8]
(int) b[0][8] = 93
Результат співпав з очікуванним


Структура проекту лабораторної роботи:
.
├── doc
│   └── lab06.txt
├── Makefile
├── README.md
└── src
    └── main.c
	Висновки: при виконанні лабораторної роботи буди набуті практичні навички створення програм з масивами та роботу з масивами