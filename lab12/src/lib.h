/**
 * @file lib.h
 * @brief Заголовочний файл з прототипами функцій для створення, обчислення та деструкції квадратної матриці та функції НСД.
 */
#ifndef LIB_H
#define LIB_H

#define TOLERANCE 1e-9

#include <float.h>
#include <limits.h>
#include <math.h>
#include <stdbool.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>

/**
 * @brief Створює масив цілих чисел.
 * 
 * Функція створює масив заданого розміру та ініціалізує значення у 0.
 * 
 * @param size Розмір масиву.
 * @return Вказівник на створений масив.
 */
int *create_int_arr(int size);

/**
 * @brief Створює масив дійсних чисел.
 * 
 * Функція створює масив заданого розміру та ініціалізує значення у 0.
 * 
 * @param size Розмір масиву.
 * @return Вказівник на створений масив.
 */
double *create_double_arr(int size);

/**
 * @brief Звільняє пам'ять, виділену під масив.
 * 
 * Функція приймає вказівник на динамічно аллокований масив та звільняє його пам'ять.
 * 
 * @param arr Вказівник на масив.
 */
void destroy_arr(void *arr);

/**
 * @brief Створює квадратну матрицю цілих чисел.
 *
 * Функція створює квадратну матрицю цілих чисел заданого розміру та заповнює її елементи.
 *
 * @param size Розмір матриці.
 * @param randomize Флаг рандомізації.
 * @param limit Ліміт генерації (0 - limit-1).
 * @param shift Зміщення згенерованих чисел (shift - shift+limit-1).
 * @return Вказівник на створену матрицю.
 */
int **create_int_mat(int size, bool randomize, int limit, int shift);

/**
 * @brief Створює квадратну матрицю дійсних чисел.
 *
 * Функція створює квадратну матрицю дійсних чисел заданого розміру та заповнює її елементи.
 *
 * @param size Розмір матриці.
 * @param randomize Флаг рандомізації.
 * @param limit Ліміт генерації (0 - limit-1).
 * @param shift Зміщення згенерованих чисел (shift - shift+limit-1).
 * @return Вказівник на створену матрицю.
 */
double **create_double_mat(int size, bool randomize, double limit, double shift);

/**
 * @brief Звільняє пам'ять, виділену під двовимірний масив будь-якого типу.
 *
 * Функція звільняє пам'ять, виділену під двовимірний масив будь-якого типу.
 *
 * @param matrix Двовимірний масив (матриця).
 * @param size Розмір матриці.
 */
void destroy_mat(void **matrix, int size);

/**
 * @brief Генерує дійсне число у заданому діапазоні.
 * 
 * Функція генерує дійсне число у заданому діапазоні.
 * 
 * @param limit Ліміт значення (може бути від'ємним та нулем).
 * @param shift Зміщення (може бути від'ємним та нулем).
 * 
 * @return Згенероване значення.
 */
double generate_random_double_value(double limit, double shift);

/**
 * @brief Генерує ціле число у заданому діапазоні.
 * 
 * Функція генерує ціле число у заданому діапазоні.
 * 
 * @param limit Ліміт значення (може бути від'ємним та нулем).
 * @param shift Зміщення (може бути від'ємним та нулем).
 * 
 * @return Згенероване значення.
 */
int generate_random_int_value(int limit, int shift);

/**
 * @brief Обчислює квадратну матрицю.
 *
 * Функція обчислює квадратну матрицю шляхом множення матриці на себе.
 *
 * @param mat_in Вхідна матриця.
 * @param mat_out Вихідна матриця.
 * @param size Розмір матриць.
 */
void square_mat(int **mat_in, int **mat_out, int size);

/**
 * @brief Обчислює найбільший спільний дільник (НСД) двох чисел.
 *
 * Функція обчислює найбільший спільний дільник (НСД) двох цілих чисел.
 *
 * @param num1 Перше число.
 * @param num2 Друге число.
 * @return Найбільший спільний дільник (НСД) чисел num1 та num2.
 */
int gcd(int num1, int num2);

/**
 * @brief Отримує двовимірну квадратну матрицю та повертає одновимірний масив, який є діагоналлю матриці, упорядковуючи її.
 * 
 * Функція отримує вказівник на двовимірну квадратну матрицю (mat_in) та виділяє пам'ять для одновимірного масиву (arr) заданого розміру (size).
 * Матриця mat_in повинна бути квадратної форми, розмір якої дорівнює size x size. 
 * Функція копіює діагональ матриці mat_in в одновимірний масив arr, сортує його в порядку зростання та повертає відсортований масив.
 * 
 * @param mat_in Вхідна матриця.
 * @param arr Вихідний одновимірний масив.
 * @param size Розмір матриці та масиву.
 * @return Відсортований масив діагоналі матриці.
 */
double *diagonal(double **mat_in, double *arr, int size);

/**
 * @brief Сортування методом бульбашки.
 * 
 * Функція сортує даний масив за допомогою метода бульбашки.
 * 
 * @param arr Масив, який треба сортувати.
 * @param size Розмір масиву.
 */
void bubble_sort(int *arr, int size);

/**
 * @brief Виводить двовимірну цілочисельну матрицю у консоль.
 * 
 * Функція виводить задану матрицю у консоль.
 * 
 * @param mat_in Вказівник на матрицю.
 * @param rows Кількість рядків.
 * @param cols Кількість стовпців.
 */
void print_int_mat(int **mat_in, int rows, int cols);

/**
 * @brief Виводить двовимірну матрицю дійсних чисел у консоль з заданою точністю.
 * 
 * Функція виводить задану матрицю дійсних чисел у консоль з заданою точністю.
 * 
 * @param mat_in Вказівник на матрицю.
 * @param rows Кількість рядків.
 * @param cols Кількість стовпців.
 * @param prec Кількість знаків після коми.
 */
void print_double_mat(double **mat_in, int rows, int cols, int prec);

/**
 * @brief Інверсія матриці методом алгебраїчних доповнень.
 * 
 * Функція інвертує матрицю методом алгебраїчних доповнень. 
 * Функція не виділяє пам'ять для матриць, вона повинна бути виділена заздалегідь.
 * 
 * @param mat_in Вказівник на матрицю, яку треба обернути.
 * @param mat_out Вказівник на матрицю, де буде зберігатися обернена матриця.
 * @param size Розмір матриці.
 * @return true, якщо інверсія успішна, або false, якщо матриця є сингулярною і не має оберненої.
 */
bool adj_reverse_mat(double **mat_in, double **mat_out, int size);

/**
 * @brief Пошук детермінанта матриці.
 * 
 * Функція знаходить детермінант матриці.
 * 
 * @param mat Вказівник на матрицю.
 * @param size Розмір матриці.
 * @return Детермінант матриці.
 */
double get_determinant(double **mat, int size);

/**
 * @brief Обчислює коефіцієнт для елемента матриці.
 * 
 * Функція обчислює коефіцієнт для елемента матриці.
 * 
 * @param mat Вихідна матриця.
 * @param temp Матриця для зберігання коефіцієнта.
 * @param p Індекс рядка елемента.
 * @param q Індекс стовпця елемента.
 * @param size Розмір матриці.
 */
void get_cofactor(double **mat, double **temp, int p, int q, int size);

/**
 * @brief Обчислює матрицю алгебраїчних доповнень для квадратної матриці.
 * 
 * Функція обчислює матрицю алгебраїчних доповнень для кожного елемента матриці та зберігає їх у вказаній матриці adj.
 * 
 * @param mat Вихідна матриця.
 * @param adj Матриця для зберігання результату.
 * @param size Розмір матриці.
 */
void get_adj_matrix(double **mat, double **adj, int size);

/**
 * @brief Міняє місця рядки у двовимірному масиві.
 *
 * Функція міняє місця рядки у двовимірному масиві (матриці).
 * 
 * @param mat Двовимірний масив, в якому треба змінити рядки.
 * @param row1 Індекс першого рядка.
 * @param row2 Індекс другого рядка.
 */
void swap_rows(void **mat, int row1, int row2);

/**
 * @brief Читає послідовність чисел з вхідного потоку.
 * 
 * Функція читає послідовність чисел з вхідного потоку та записує їх у масив. 
 * Пам'ять для масиву виділяється динамічно і повинна бути звільнена вручну.
 * 
 * @param stream Вхідний потік для читання.
 * @param count Вказівник на змінну, в яку буде записано кількість прочитаних чисел.
 * @return Масив прочитаних чисел. 
 */
double *read_input(FILE *stream, size_t *count);

/**
 * @brief Запитує користувача, чи бажає він ввести числа.
 * 
 * @param stream Вхідний потік для читання вибору користувача.
 * @return true, якщо користувач хоче ввести числа, і false в іншому випадку.
 */
bool prompt_for_input(FILE *stream);

/**
 * @brief Конвертує одновимірний масив в двовимірну матрицю.
 *
 * Функція отримує на вхід масив дійсних чисел (arr), кількість елементів в масиві (count) 
 * і вказівник на змінну, в яку буде записано розмір квадратної матриці (size).
 * Якщо кількість елементів в масиві є квадратом цілого числа, функція створює квадратну матрицю 
 * розміром sqrt(count) x sqrt(count) та заповнює її елементами з масиву.
 * Якщо кількість елементів не є квадратом цілого числа, функція створює квадратну матрицю 
 * розміром ceil(sqrt(count)) x ceil(sqrt(count)) та заповнює її елементами з масиву.
 * Усі залишкові елементи матриці, які не мають відповідних елементів в масиві, заповнюються нулями.
 *
 * @param arr Масив дійсних чисел, який буде конвертований в матрицю.
 * @param count Кількість елементів у масиві.
 * @param size Вказівник на змінну, в яку буде записано розмір квадратної матриці.
 * @return Покажчик на двовимірний масив (матрицю) з елементами з масиву arr.
 * @note Пам'ять для матриці виділяється в середині функції та потрібно її звільнити після використання.
 * @warning При використанні функції впевніться, що масив arr має достатньо елементів для заповнення матриці.
 */
double **convert_array_to_mat(const double *arr, size_t count, int *size);

void skip_whitespace(char **str);

bool parse_double(const char *str, double *result);

void read_and_parse_input(FILE *stream, double **arr, size_t *size, size_t *capacity);

void add_double_to_array(double **arr, size_t *size, size_t *capacity, double num);

void increase_capacity(double **arr, size_t *capacity);

bool parse_exponent(const char **str, double *num);

bool parse_decimal_part(const char **str, double *num);

bool parse_integer_part(const char **str, double *num);
#endif /* LIB_H */
